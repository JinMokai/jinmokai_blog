---
interface Props {
	status: boolean;
}
const { status } = Astro.props;
---
<!-- 
    If you use the tip prompt, you can use the tip slot
 -->
<div class="code" class:list={[{'mt-8': status, 'mt-0': !status}]}>
    <div class="code-content relative">
        <div class="code-tip inline-flex absolute bottom-full py-1 px-1 rounded bg-codeBg">
            {
                status && (
                    <span class="w-6 h-6">
                        <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path opacity="0.5" d="M3 10C3 6.22876 3 4.34315 4.17157 3.17157C5.34315 2 7.22876 2 11 2H13C16.7712 2 18.6569 2 19.8284 3.17157C21 4.34315 21 6.22876 21 10V14C21 17.7712 21 19.6569 19.8284 20.8284C18.6569 22 16.7712 22 13 22H11C7.22876 22 5.34315 22 4.17157 20.8284C3 19.6569 3 17.7712 3 14V10Z" stroke="#1C274C" stroke-width="1.5"></path> <path d="M8 10H16" stroke="#1C274C" stroke-width="1.5" stroke-linecap="round"></path> <path d="M8 14H13" stroke="#1C274C" stroke-width="1.5" stroke-linecap="round"></path> </g></svg>
                    </span>
                )
            }
            <slot name="tip"/>
        </div>
        <slot name="code"/>
    </div>
</div>

<style>
    /* The purpose of using inline within a component is to penetrate the internal style of the component  */
.code-tip :global(.code-tip) {
    display: block;
    width: fit-content;
    font-size: 0.8rem;
    font-weight: 500;
}

.code-content :global(.code-content > .astro-code)  {
    background-color: var(--code-bg) !important;
    margin-top: 0;
    border-top-left-radius: 0;
}
</style>